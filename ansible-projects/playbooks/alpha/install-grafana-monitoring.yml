---
- name: Install Grafana and Cluster-wide Monitoring Stack
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    # Monitoring configuration
    monitoring_namespace: "monitoring"
    grafana_namespace: "{{ monitoring_namespace }}"
    
    # Helm configuration
    helm_repo_prometheus: "prometheus-community"
    helm_repo_grafana: "grafana"
    
    # Chart versions (latest stable)
    kube_prometheus_stack_version: "61.9.0"
    grafana_version: "8.4.2"
    
    # Grafana configuration
    grafana_admin_user: "admin"
    grafana_admin_password: "admin123"  # Change this in production!
    grafana_service_type: "NodePort"
    grafana_node_port: 30000
    
    # Prometheus configuration
    prometheus_retention: "30d"
    prometheus_storage_size: "10Gi"
    
    # AlertManager configuration
    alertmanager_storage_size: "2Gi"
    
    # Additional exporters
    node_exporter_enabled: true
    kube_state_metrics_enabled: true
    
    # Ingress configuration (optional)
    enable_ingress: false
    grafana_ingress_host: "grafana.local"

  tasks:
    - name: Check if kubectl is available
      command: kubectl version --client
      register: kubectl_check
      failed_when: false
      changed_when: false

    - name: Fail if kubectl is not available
      fail:
        msg: "kubectl is not available. Please install kubectl first."
      when: kubectl_check.rc != 0

    - name: Check Kubernetes cluster connectivity
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Node
      register: cluster_check
      failed_when: false

    - name: Fail if cluster is not accessible
      fail:
        msg: "Cannot connect to Kubernetes cluster. Please check your kubeconfig."
      when: cluster_check.failed is defined and cluster_check.failed

    - name: Check if Helm is installed
      command: helm version --short
      register: helm_check
      failed_when: false
      changed_when: false

    - name: Fail if Helm is not available
      fail:
        msg: "Helm is not available. Please install Helm first."
      when: helm_check.rc != 0

    - name: Create monitoring namespace
      kubernetes.core.k8s:
        name: "{{ monitoring_namespace }}"
        api_version: v1
        kind: Namespace
        state: present

    - name: Add Prometheus Community Helm repository
      kubernetes.core.helm_repository:
        name: "{{ helm_repo_prometheus }}"
        repo_url: "https://prometheus-community.github.io/helm-charts"

    - name: Add Grafana Helm repository
      kubernetes.core.helm_repository:
        name: "{{ helm_repo_grafana }}"
        repo_url: "https://grafana.github.io/helm-charts"

    - name: Update Helm repositories
      command: helm repo update
      changed_when: true

    - name: Create Grafana configuration ConfigMap
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: grafana-dashboards-config
            namespace: "{{ monitoring_namespace }}"
          data:
            dashboards.yaml: |
              apiVersion: 1
              providers:
                - name: 'default'
                  orgId: 1
                  folder: ''
                  type: file
                  disableDeletion: false
                  editable: true
                  options:
                    path: /var/lib/grafana/dashboards/default
        state: present

    - name: Install kube-prometheus-stack (Prometheus + Grafana + AlertManager)
      kubernetes.core.helm:
        name: kube-prometheus-stack
        chart_ref: "{{ helm_repo_prometheus }}/kube-prometheus-stack"
        release_namespace: "{{ monitoring_namespace }}"
        create_namespace: true
        values:
          # Prometheus configuration
          prometheus:
            prometheusSpec:
              retention: "{{ prometheus_retention }}"
              storageSpec:
                volumeClaimTemplate:
                  spec:
                    storageClassName: ""
                    accessModes: ["ReadWriteOnce"]
                    resources:
                      requests:
                        storage: "{{ prometheus_storage_size }}"
              serviceMonitorSelectorNilUsesHelmValues: false
              podMonitorSelectorNilUsesHelmValues: false
              ruleSelectorNilUsesHelmValues: false
              
          # Grafana configuration
          grafana:
            enabled: true
            adminUser: "{{ grafana_admin_user }}"
            adminPassword: "{{ grafana_admin_password }}"
            service:
              type: "{{ grafana_service_type }}"
              nodePort: "{{ grafana_node_port }}"
            persistence:
              enabled: true
              size: 5Gi
            plugins:
              - grafana-clock-panel
              - grafana-simple-json-datasource
              - grafana-worldmap-panel
              - grafana-piechart-panel
            dashboardProviders:
              dashboardproviders.yaml:
                apiVersion: 1
                providers:
                - name: 'default'
                  orgId: 1
                  folder: ''
                  type: file
                  disableDeletion: false
                  editable: true
                  options:
                    path: /var/lib/grafana/dashboards/default
            dashboards:
              default:
                kubernetes-cluster-monitoring:
                  gnetId: 7249
                  revision: 1
                  datasource: Prometheus
                kubernetes-pod-monitoring:
                  gnetId: 6417
                  revision: 1
                  datasource: Prometheus
                node-exporter-full:
                  gnetId: 1860
                  revision: 37
                  datasource: Prometheus
                kubernetes-deployment-statefulset-daemonset-metrics:
                  gnetId: 8588
                  revision: 1
                  datasource: Prometheus
            ingress:
              enabled: "{{ enable_ingress }}"
              hosts:
                - "{{ grafana_ingress_host }}"
              
          # AlertManager configuration
          alertmanager:
            alertmanagerSpec:
              storage:
                volumeClaimTemplate:
                  spec:
                    storageClassName: ""
                    accessModes: ["ReadWriteOnce"]
                    resources:
                      requests:
                        storage: "{{ alertmanager_storage_size }}"
                        
          # Node Exporter configuration
          nodeExporter:
            enabled: "{{ node_exporter_enabled }}"
            
          # Kube State Metrics configuration
          kube-state-metrics:
            enabled: "{{ kube_state_metrics_enabled }}"
            
          # Disable some components for local development
          kubeEtcd:
            enabled: false
          kubeControllerManager:
            enabled: false
          kubeScheduler:
            enabled: false
          kubeProxy:
            enabled: false

    - name: Wait for Prometheus deployment to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: StatefulSet
        name: prometheus-kube-prometheus-stack-prometheus
        namespace: "{{ monitoring_namespace }}"
        wait_condition:
          type: Ready
          status: "True"
        wait_timeout: 600

    - name: Wait for Grafana deployment to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: kube-prometheus-stack-grafana
        namespace: "{{ monitoring_namespace }}"
        wait_condition:
          type: Available
          status: "True"
        wait_timeout: 300

    - name: Wait for AlertManager deployment to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: StatefulSet
        name: alertmanager-kube-prometheus-stack-alertmanager
        namespace: "{{ monitoring_namespace }}"
        wait_condition:
          type: Ready
          status: "True"
        wait_timeout: 300

    - name: Create additional ServiceMonitor for custom applications
      kubernetes.core.k8s:
        definition:
          apiVersion: monitoring.coreos.com/v1
          kind: ServiceMonitor
          metadata:
            name: custom-app-metrics
            namespace: "{{ monitoring_namespace }}"
            labels:
              app: custom-app-metrics
          spec:
            selector:
              matchLabels:
                metrics: "enabled"
            endpoints:
            - port: metrics
              path: /metrics
              interval: 30s
        state: present

    - name: Create sample PrometheusRule for custom alerts
      kubernetes.core.k8s:
        definition:
          apiVersion: monitoring.coreos.com/v1
          kind: PrometheusRule
          metadata:
            name: custom-monitoring-rules
            namespace: "{{ monitoring_namespace }}"
            labels:
              app: kube-prometheus-stack
              release: kube-prometheus-stack
          spec:
            groups:
            - name: custom.rules
              rules:
              - alert: HighMemoryUsage
                expr: (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes > 0.85
                for: 5m
                labels:
                  severity: warning
                annotations:
                  summary: "High memory usage detected"
                  description: "Memory usage is above 85% for more than 5 minutes"
              - alert: HighCPUUsage
                expr: 100 - (avg(rate(node_cpu_seconds_total{mode="idle"}[5m])) * 100) > 80
                for: 5m
                labels:
                  severity: warning
                annotations:
                  summary: "High CPU usage detected"
                  description: "CPU usage is above 80% for more than 5 minutes"
        state: present

    - name: Get Grafana service details
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        name: kube-prometheus-stack-grafana
        namespace: "{{ monitoring_namespace }}"
      register: grafana_service

    - name: Get Prometheus service details
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        name: kube-prometheus-stack-prometheus
        namespace: "{{ monitoring_namespace }}"
      register: prometheus_service

    - name: Get AlertManager service details
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        name: kube-prometheus-stack-alertmanager
        namespace: "{{ monitoring_namespace }}"
      register: alertmanager_service

    - name: Create port-forward helper scripts
      copy:
        content: |
          #!/bin/bash
          echo "Starting port-forward for {{ item.name }}..."
          kubectl port-forward -n {{ monitoring_namespace }} service/{{ item.service }} {{ item.local_port }}:{{ item.service_port }} &
          echo "{{ item.name }} will be available at http://localhost:{{ item.local_port }}"
          echo "PID: $!"
        dest: "./port-forward-{{ item.name.lower() }}.sh"
        mode: '0755'
      loop:
        - { name: "Grafana", service: "kube-prometheus-stack-grafana", local_port: 3000, service_port: 80 }
        - { name: "Prometheus", service: "kube-prometheus-stack-prometheus", local_port: 9090, service_port: 9090 }
        - { name: "AlertManager", service: "kube-prometheus-stack-alertmanager", local_port: 9093, service_port: 9093 }
      delegate_to: localhost

    - name: Create monitoring access script
      copy:
        content: |
          #!/bin/bash
          
          echo "╔══════════════════════════════════════════════════════════════╗"
          echo "║                    Monitoring Stack Access                   ║"
          echo "╠══════════════════════════════════════════════════════════════╣"
          echo "║                                                              ║"
          echo "║ Grafana (NodePort):                                          ║"
          echo "║   URL: http://localhost:{{ grafana_node_port }}                     ║"
          echo "║   OR: kubectl port-forward -n {{ monitoring_namespace }} svc/kube-prometheus-stack-grafana 3000:80 ║"
          echo "║   Username: {{ grafana_admin_user }}                                     ║"
          echo "║   Password: {{ grafana_admin_password }}                                   ║"
          echo "║                                                              ║"
          echo "║ Prometheus:                                                  ║"
          echo "║   kubectl port-forward -n {{ monitoring_namespace }} svc/kube-prometheus-stack-prometheus 9090:9090 ║"
          echo "║   URL: http://localhost:9090                                 ║"
          echo "║                                                              ║"
          echo "║ AlertManager:                                                ║"
          echo "║   kubectl port-forward -n {{ monitoring_namespace }} svc/kube-prometheus-stack-alertmanager 9093:9093 ║"
          echo "║   URL: http://localhost:9093                                 ║"
          echo "║                                                              ║"
          echo "╚══════════════════════════════════════════════════════════════╝"
          
          echo ""
          echo "Quick commands:"
          echo "  # Check monitoring pods"
          echo "  kubectl get pods -n {{ monitoring_namespace }}"
          echo ""
          echo "  # Check services"
          echo "  kubectl get svc -n {{ monitoring_namespace }}"
          echo ""
          echo "  # Check ServiceMonitors"
          echo "  kubectl get servicemonitor -n {{ monitoring_namespace }}"
          echo ""
          echo "  # Check PrometheusRules"
          echo "  kubectl get prometheusrule -n {{ monitoring_namespace }}"
          echo ""
          echo "  # Port forward all services (run in background)"
          echo "  ./port-forward-grafana.sh"
          echo "  ./port-forward-prometheus.sh"
          echo "  ./port-forward-alertmanager.sh"
          
        dest: "./monitoring-access.sh"
        mode: '0755'
      delegate_to: localhost

    - name: Create sample application with metrics
      copy:
        content: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: sample-app-with-metrics
            namespace: default
            labels:
              app: sample-app
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: sample-app
            template:
              metadata:
                labels:
                  app: sample-app
              spec:
                containers:
                - name: sample-app
                  image: nginx:alpine
                  ports:
                  - containerPort: 80
                    name: http
                  - containerPort: 9113
                    name: metrics
                  resources:
                    requests:
                      memory: "64Mi"
                      cpu: "250m"
                    limits:
                      memory: "128Mi"
                      cpu: "500m"
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: sample-app-service
            namespace: default
            labels:
              app: sample-app
              metrics: enabled  # This label makes it discoverable by ServiceMonitor
          spec:
            selector:
              app: sample-app
            ports:
            - port: 80
              targetPort: 80
              name: http
            - port: 9113
              targetPort: 9113
              name: metrics
        dest: "./sample-app-with-metrics.yaml"
        mode: '0644'
      delegate_to: localhost

    - name: Display installation summary
      debug:
        msg: |
          ╔══════════════════════════════════════════════════════════════════════╗
          ║                    Monitoring Stack Installation Complete             ║
          ╠══════════════════════════════════════════════════════════════════════╣
          ║                                                                      ║
          ║ Components Installed:                                                ║
          ║   ✓ Prometheus (metrics collection)                                  ║
          ║   ✓ Grafana (visualization)                                          ║
          ║   ✓ AlertManager (alerting)                                          ║
          ║   ✓ Node Exporter (node metrics)                                     ║
          ║   ✓ Kube State Metrics (k8s resource metrics)                        ║
          ║                                                                      ║
          ║ Namespace: {{ monitoring_namespace }}                                           ║
          ║                                                                      ║
          ║ Access Information:                                                  ║
          ║   Grafana: http://localhost:{{ grafana_node_port }} (admin/{{ grafana_admin_password }})            ║
          ║                                                                      ║
          ║ Next Steps:                                                          ║
          ║   1. Run: ./monitoring-access.sh                                     ║
          ║   2. Access Grafana and explore pre-loaded dashboards               ║
          ║   3. Deploy sample app: kubectl apply -f sample-app-with-metrics.yaml║
          ║   4. Check pod status: kubectl get pods -n {{ monitoring_namespace }}          ║
          ║                                                                      ║
          ║ Pre-loaded Dashboards in Grafana:                                   ║
          ║   • Kubernetes Cluster Monitoring                                    ║
          ║   • Kubernetes Pod Monitoring                                        ║
          ║   • Node Exporter Full                                               ║
          ║   • Kubernetes Deployment/StatefulSet/DaemonSet Metrics             ║
          ║                                                                      ║
          ╚══════════════════════════════════════════════════════════════════════╝

  handlers:
    - name: Restart monitoring components
      kubernetes.core.k8s:
        state: restarted
        api_version: apps/v1
        kind: Deployment
        name: kube-prometheus-stack-grafana
        namespace: "{{ monitoring_namespace }}"