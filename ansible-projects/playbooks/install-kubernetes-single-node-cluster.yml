---
- name: Setup Single Node Kubernetes Cluster
  hosts: localhost
  become: yes
  vars:
    k8s_version: "1.31"
    pod_network_cidr: "10.244.0.0/16"
    ansible_user: "{{ lookup('env', 'USER') }}"
    
  tasks:
    # Prerequisites and system setup
    - name: Update system packages
      apt:
        update_cache: yes
        upgrade: dist
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"

    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - software-properties-common
        state: present
      when: ansible_os_family == "Debian"

    # Docker installation and containerd configuration
    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Create containerd config directory
      file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    - name: Generate containerd config
      shell: containerd config default > /etc/containerd/config.toml

    - name: Configure containerd to use systemd cgroup driver
      replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'
      notify: restart containerd

    - name: Enable containerd CRI plugin
      replace:
        path: /etc/containerd/config.toml
        regexp: 'disabled_plugins.*'
        replace: 'disabled_plugins = []'
      notify: restart containerd

    - name: Create Docker daemon configuration
      copy:
        content: |
          {
            "exec-opts": ["native.cgroupdriver=systemd"],
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "100m"
            },
            "storage-driver": "overlay2"
          }
        dest: /etc/docker/daemon.json
        mode: '0644'
      notify: restart docker

    - name: Start and enable containerd
      systemd:
        name: containerd
        state: started
        enabled: yes

    - name: Start and enable Docker
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Flush handlers to ensure containerd is properly configured
      meta: flush_handlers

    - name: Wait for containerd to be fully ready
      pause:
        seconds: 10

    - name: Add user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    # Kubernetes installation
    - name: Remove any existing Kubernetes repository
      file:
        path: /etc/apt/sources.list.d/kubernetes.list
        state: absent

    - name: Unhold Kubernetes packages
      dpkg_selections:
        name: "{{ item }}"
        selection: install
      loop:
        - kubelet
        - kubeadm
        - kubectl
      ignore_errors: yes

    - name: Remove existing Kubernetes packages
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: absent
        purge: yes

    - name: Add Kubernetes GPG key
      apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}/deb/Release.key
        state: present

    - name: Add Kubernetes repository
      apt_repository:
        repo: "deb https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}/deb/ /"
        state: present
        filename: kubernetes

    - name: Update apt cache after adding Kubernetes repository
      apt:
        update_cache: yes

    - name: Install specific Kubernetes components
      apt:
        name:
          - kubelet={{ k8s_version }}.*
          - kubeadm={{ k8s_version }}.*
          - kubectl={{ k8s_version }}.*
        state: present
        allow_downgrade: yes

    - name: Hold Kubernetes packages
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl

    # System configuration for Kubernetes
    - name: Disable swap
      shell: swapoff -a

    - name: Remove swap from fstab
      lineinfile:
        path: /etc/fstab
        regexp: '.*swap.*'
        state: absent

    - name: Fix mount propagation for WSL2/containerized environments
      shell: mount --make-rshared /
      become: yes

    - name: Ensure /var/run/netns exists with proper permissions
      file:
        path: /var/run/netns
        state: directory
        mode: '0755'

    - name: Make /var/run/netns shared mount
      shell: mount --make-rshared /var/run/netns || true
      become: yes
      ignore_errors: yes

    - name: Load required kernel modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter

    - name: Make kernel modules persistent
      copy:
        content: |
          overlay
          br_netfilter
        dest: /etc/modules-load.d/k8s.conf

    - name: Configure sysctl for Kubernetes
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop:
        - { name: 'net.bridge.bridge-nf-call-iptables', value: '1' }
        - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
        - { name: 'net.ipv4.ip_forward', value: '1' }

    # Initialize Kubernetes cluster
    - name: Check if cluster is already initialized
      stat:
        path: /etc/kubernetes/admin.conf
      register: k8s_admin_conf

    - name: Reset kubeadm if previous initialization failed
      shell: kubeadm reset -f --cri-socket unix:///var/run/containerd/containerd.sock
      when: not k8s_admin_conf.stat.exists
      ignore_errors: yes

    - name: Initialize Kubernetes cluster
      shell: kubeadm init --pod-network-cidr={{ pod_network_cidr }} --cri-socket unix:///var/run/containerd/containerd.sock --kubernetes-version=v{{ k8s_version }}.0
      when: not k8s_admin_conf.stat.exists

    # Configure kubectl for the user
    - name: Create .kube directory
      file:
        path: "/home/{{ ansible_user }}/.kube"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "/home/{{ ansible_user }}/.kube/config"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'
        remote_src: yes

    - name: Ensure kubectl config is accessible
      file:
        path: "/home/{{ ansible_user }}/.kube/config"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'

    # Remove taint from master node (single-node setup)
    - name: Remove taint from master node
      shell: kubectl taint nodes --all node-role.kubernetes.io/control-plane-
      environment:
        KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
      become_user: "{{ ansible_user }}"
      ignore_errors: yes

    - name: Remove unreachable taint if present
      shell: kubectl taint nodes --all node.kubernetes.io/unreachable:NoSchedule-
      environment:
        KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
      become_user: "{{ ansible_user }}"
      ignore_errors: yes

    - name: Restart kubelet after mount configuration
      systemd:
        name: kubelet
        state: restarted

    - name: Wait for kubelet to stabilize
      pause:
        seconds: 15

    # Install CNI (Cilium)
    - name: Install Cilium CLI
      shell: |
        CILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/master/stable.txt)
        CLI_ARCH=amd64
        if [ "$(uname -m)" = "aarch64" ]; then CLI_ARCH=arm64; fi
        curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz
        curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz.sha256sum
        sha256sum --check cilium-linux-${CLI_ARCH}.tar.gz.sha256sum
        sudo tar xzvfC cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin
        rm -f cilium-linux-${CLI_ARCH}.tar.gz cilium-linux-${CLI_ARCH}.tar.gz.sha256sum
      args:
        creates: /usr/local/bin/cilium

    - name: Install Cilium CNI
      shell: cilium install
      environment:
        KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
      become_user: "{{ ansible_user }}"

    - name: Wait for Cilium to be ready
      shell: cilium status --wait
      environment:
        KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
      become_user: "{{ ansible_user }}"
      retries: 10
      delay: 30

    # Wait for nodes to be ready
    - name: Wait for node to be ready
      shell: kubectl get nodes | grep -E "(Ready|NotReady)"
      environment:
        KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
      become_user: "{{ ansible_user }}"
      register: node_status
      until: "'Ready' in node_status.stdout and 'NotReady' not in node_status.stdout"
      retries: 30
      delay: 10

    - name: Display cluster status
      debug:
        msg: |
          Kubernetes cluster setup complete!
          
          To use your cluster:
          - kubectl get nodes
          - kubectl get pods -A
          - cilium status
          
          To test with a simple deployment:
          - kubectl create deployment nginx --image=nginx
          - kubectl get pods

    # Install useful tools
    - name: Install Helm
      shell: |
        curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
        apt update
        apt install helm -y

  handlers:
    - name: restart docker
      systemd:
        name: docker
        state: restarted

    - name: restart containerd
      systemd:
        name: containerd
        state: restarted

    - name: restart kubelet
      systemd:
        name: kubelet
        state: restarted